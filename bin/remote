#!/usr/bin/env bash

## Allow to run fin on remote server with xip.io domain.
## Usage: fin remote <command> (options)
## Commands:
##   project|p [up|start|stop|restart|down|open]
##   proxy|x - run docker-compose commands on nginx proxy; see docker-compose
##   config|c - current config
## Shortcuts:
##   up - warmup Docksal project; alias to `fin remote project up`
##   start - start Docksal project; alias to `fin remote project start`
##   restart - restart Docksal project; alias to `fin remote project restart`
##   stop - stop Docksal project; alias to `fin remote project stop`
##   down - remove Docksal project; alias to `fin remote project down`
##   open - open public URL; alias to `fin remote project open`
## Env variables:
##   DEVELOPER_MACHINE_HOSTNAME - local machine IP for remote NFS connection; default value is local machine IP, but You can save it in docksal.env file on local computer
##   PROJECT_INACTIVITY_TIMEOUT - defines the timeout of inactivity after which the project stack will be stopped; default 0.5h


#-------------------------- Helper functions: Console colors --------------------------------
color_red='\033[0;31m'
color_red_bold='\033[1;91m'
color_red_bg='\033[0;41m'
color_green='\033[0;32m'
color_green_bold='\033[1;92m'
color_green_bg='\033[42m'
color_yellow='\033[0;33m'
color_yellow_bold='\033[1;93m'
color_title='\033[1;42m'
NC='\033[0m'
#-------------------------- Helper functions: I/O --------------------------------
print_text () {
    printf "${1}${2}${NC}"
}
print_text_line () {
    print_text "$1" "$2"
    printf "\n"
}
display-error (){
    local message=$1
    local exit_code=${2:-1}
    print_text_line ${color_red} "${message}" >&2
    errors=1
}
#-------------------------- Helper functions: OS --------------------------------
if  [[ -f "/etc/os-release" ]]; then
	(uname -a | grep -v 'Microsoft' >/dev/null) && OS_TYPE="Linux" || OS_TYPE="WSL"
	IFS=";" read OS_NAME OS_VERSION OS_ID OS_ID_LIKE < <(source "/etc/os-release"; echo "$NAME;$VERSION_ID;$ID;$ID_LIKE")
	export OS_TYPE OS_NAME OS_VERSION
elif (uname | grep 'Darwin' >/dev/null); then
	export OS_TYPE="Darwin"
	export OS_NAME="$(sw_vers -productName)"
	export OS_VERSION="$(sw_vers -productVersion)"
elif (uname | grep 'CYGWIN_NT' >/dev/null); then
	export OS_TYPE="Cygwin"
	export OS_NAME="Windows"
	export OS_VERSION="$(echo $(cmd /c ver) | sed 's/.*Version \(.*\)\..*]/\1/')"
fi

is_linux () {
    local os_type=${1:-$OS_TYPE}
	[[ "$os_type" == "Linux" ]]
}
is_windows () {
    local os_type=${1:-$OS_TYPE}
	[[ "$os_type" == "Cygwin" ]]
}
is_mac () {
    local os_type=${1:-$OS_TYPE}
	[[ "$os_type" == "Darwin" ]]
}
#-------------------------- END: Helper functions --------------------------------



#-------------------------- Settings --------------------------------
errors=0
_DOCKSAL_ENVIRONMENT="remote-web-xip"
if [[ "${DOCKSAL_ENVIRONMENT}" != "${_DOCKSAL_ENVIRONMENT}" ]]; then
    display-error 'Invalid Docksal environment. Please run `export DOCKSAL_ENVIRONMENT="'${_DOCKSAL_ENVIRONMENT}'"`'
fi
if [[ "${DOCKSAL_HOST}" == "" ]]; then
    display-error 'Invalid Docksal host. Please run `export DOCKSAL_HOST="tcp://IP:PORT"` with valid remote IP and PORT'
fi
if [[ -z ${DEVELOPER_MACHINE_HOSTNAME} ]]; then
    if is_mac; then
        DEVELOPER_MACHINE_HOSTNAME=$(ifconfig en0 | grep "inet " | grep -Fv 127.0.0.1 | awk '{print $2}')
    elif is_linux; then
        DEVELOPER_MACHINE_HOSTNAME=$(hostname -i)
    else
        display-error "Unknown local developer IP. Please specify DEVELOPER_MACHINE_HOSTNAME in .env file."
    fi
fi
if [[ -z ${PROJECT_INACTIVITY_TIMEOUT} ]]; then
    PROJECT_INACTIVITY_TIMEOUT="0.5h"
fi
REMOTE_HOST_IP=$(echo $DOCKSAL_HOST | awk -F/ '{print $3}' | sed 's/:.*//')
REMOTE_VIRTUAL_HOST="${VIRTUAL_HOST}.${REMOTE_HOST_IP}.xip.io"
REMOTE_URL_HTTP="http://${REMOTE_VIRTUAL_HOST}"
if [[ "$errors" != "0" ]]; then
    exit $exit_code
fi
SCRIPT_ROOT=$(cd `dirname $0` && pwd)
PROJECT_ROOT_ESCAPED=$(echo "$PROJECT_ROOT" | sed 's/\//\\\//g')
PROXY_APP_NAME="proxyapp"
PROXY_APP_CONFIG="docker-nginx-proxy.yml"
DOCKSAL_VHOST_PROXY_PORT_HTTP=8080
DOCKSAL_VHOST_PROXY_PORT_HTTPS=8443
#-------------------------- END: Settings --------------------------------



#-------------------------- Functions: NFS --------------------------------
nfs_up () {
    if is_linux || is_mac ; then
        has_exports=$(grep "${PROJECT_ROOT} ${REMOTE_HOST_IP}" /etc/exports)
        if [[ -z "$has_exports" ]]; then
            (\
                print_text_line ${color_title} "Prepare exports file" \
                && \
                print_text_line ${color_green} "You may be asked for root password to modify '/etc/exports' file" \
                && \
                echo "${PROJECT_ROOT} ${REMOTE_HOST_IP}" | sudo tee -a /etc/exports \
                && \
                _local_nfs_reload \
            )
        fi
    fi
}
nfs_down () {
    if is_linux || is_mac ; then
        (\
            print_text_line ${color_title} "Cleanup local NFS exports" \
            && \
            print_text_line ${color_green} "You may be asked for root password to modify '/etc/exports' file" \
            && \
            sed '/^'$PROJECT_ROOT_ESCAPED'/d' /etc/exports | sudo tee /etc/exports >/dev/null \
            && \
            _local_nfs_reload \
        )
    fi
}
_local_nfs_reload () {
	if is_linux ; then
		sudo exportfs -a
	fi
	if is_mac ; then
		sudo nfsd restart
	fi
}
#-------------------------- Functions: DOCKSAL BASE --------------------------------
docker_compose_proxy () {
    print_text_line ${color_title} "Execute docker-compose on ${PROXY_APP_NAME}"
    docker-compose --project-name ${PROXY_APP_NAME} --file ${SCRIPT_ROOT}/${PROXY_APP_CONFIG} $@
}
docksal_project_start () {
    (\
        _docksal_env_setup \
        && \
        nfs_up \
        && \
        (\
            print_text_line ${color_title} "Start project on Docksal" \
            && \
            fin start \
        )\
        && \
        ( \
            ( \
                ( \
                    docksal_to_proxy_network_connect \
                    && \
                    fin start \
                )\
            ) \
            || \
            print_text_line ${color_green} "Container '${PROXY_APP_NAME}' already connected to '${COMPOSE_PROJECT_NAME_SAFE}_default' network." \
        ) \
        && \
        print_text_line ${color_title} "Project public URL: ${REMOTE_URL_HTTP}" \
    ) || print_text_line ${color_red} "Project not started!"
}
docksal_project_up () {
    (\
        _docksal_env_setup \
        && \
        nfs_up \
        && \
        (\
            print_text_line ${color_title} "WarmUp project on Docksal" \
            && \
            fin up \
        ) \
        && \
        ( \
            ( \
                docksal_to_proxy_network_connect \
                && \
                fin start \
            ) \
            || \
            print_text_line ${color_green} "Container '${PROXY_APP_NAME}' already connected to '${COMPOSE_PROJECT_NAME_SAFE}_default' network." \
        ) \
        && \
        print_text_line ${color_title} "Project public URL: ${REMOTE_URL_HTTP}" \
    ) || print_text_line ${color_red} "Project not warmed-up!"
}
docksal_project_stop () {
    ( \
        docksal_to_proxy_network_disconnect \
        && \
        (\
            (\
                print_text_line ${color_title} "Stop project on Docksal" \
                && \
                fin stop \
            ) || print_text_line ${color_red} "Project not stopped!"
        )\
        && \
        nfs_down \
        && \
        _docksal_env_reset \
    )
}
docksal_project_down () {
    ( \
        docksal_to_proxy_network_disconnect \
        && \
        (\
            (\
                print_text_line ${color_title} "Remove project on Docksal" \
                && \
                fin remove -f \
            ) || print_text_line ${color_red} "Project not removed!"
        )\
        && \
        nfs_down \
        && \
        _docksal_env_reset \
    )
}
docksal_project_open () {
    print_text_line ${color_title} "Open ${REMOTE_URL_HTTP}"
    open ${REMOTE_URL_HTTP}
}
#-------------------------- Functions: DOCKSAL NETWORK --------------------------------
docksal_to_proxy_network_connect () {
    local network="${COMPOSE_PROJECT_NAME_SAFE}_default"
    (\
        print_text_line ${color_title} "Connect '${PROXY_APP_NAME}' container to project network" \
        && \
        docker network connect "$network" ${PROXY_APP_NAME}_nginx_1 2>/dev/null \
    ) || printf ""
}
docksal_to_proxy_network_disconnect () {
    local network="${COMPOSE_PROJECT_NAME_SAFE}_default"
    (\
        print_text_line ${color_title} "Disconnect '${PROXY_APP_NAME}' container from project network" \
        && \
        docker network disconnect "$network" ${PROXY_APP_NAME}_nginx_1 \
    ) || printf ""
}
#-------------------------- Functions: DOCKSAL ENV --------------------------------
_docksal_env_setup () {
    if [[ ! $(fin remote proxy ps | grep " Up ") ]]; then
        print_text_line ${color_title} "Start ${PROXY_APP_NAME}"
        fin remote proxy up -d
    fi
    if [[ -f ${PROJECT_ROOT}/.docksal/docksal-${DOCKSAL_ENVIRONMENT}.env ]] || [[ -f ${PROJECT_ROOT}/.docksal/docksal-${DOCKSAL_ENVIRONMENT}.yml ]]; then
        _docksal_env_reset
    fi
    print_text_line ${color_title} "Setup '${DOCKSAL_ENVIRONMENT}' project environment"
    touch ${PROJECT_ROOT}/.docksal/docksal-${DOCKSAL_ENVIRONMENT}.env
    echo "REMOTE_VIRTUAL_HOST=${REMOTE_VIRTUAL_HOST}" >> ${PROJECT_ROOT}/.docksal/docksal-${DOCKSAL_ENVIRONMENT}.env
    echo "DEVELOPER_MACHINE_HOSTNAME=${DEVELOPER_MACHINE_HOSTNAME}" >> ${PROJECT_ROOT}/.docksal/docksal-${DOCKSAL_ENVIRONMENT}.env
    echo "PROJECT_INACTIVITY_TIMEOUT=${PROJECT_INACTIVITY_TIMEOUT}" >> ${PROJECT_ROOT}/.docksal/docksal-${DOCKSAL_ENVIRONMENT}.env
    cp ${SCRIPT_ROOT}/docksal-${DOCKSAL_ENVIRONMENT}.yml ${PROJECT_ROOT}/.docksal/docksal-${DOCKSAL_ENVIRONMENT}.yml
}
_docksal_env_reset () {
    print_text_line ${color_title} "Remove '${DOCKSAL_ENVIRONMENT}' project environment"
    rm ${PROJECT_ROOT}/.docksal/docksal-${DOCKSAL_ENVIRONMENT}.env 2>/dev/null
    rm ${PROJECT_ROOT}/.docksal/docksal-${DOCKSAL_ENVIRONMENT}.yml 2>/dev/null
}
docksal_vhost_proxy_ports_check () {
    print_text_line ${color_title} "Check docksal-vhost-proxy ports"

    local remote_docksal_vhost_proxy_port_http=$(fin config get --global DOCKSAL_VHOST_PROXY_PORT_HTTP | sed 's/[^0-9]*//g')
    remote_docksal_vhost_proxy_port_http=$(echo $remote_docksal_vhost_proxy_port_http | tr -s '[:blank:]')
    local remote_docksal_vhost_proxy_port_https=$(fin config get --global DOCKSAL_VHOST_PROXY_PORT_HTTPS | sed 's/[^0-9]*//g')
    remote_docksal_vhost_proxy_port_https=$(echo $remote_docksal_vhost_proxy_port_https | tr -s '[:blank:]')

    if [[ "$remote_docksal_vhost_proxy_port_http" != "$DOCKSAL_VHOST_PROXY_PORT_HTTP" ]]; then
        fin config set --global DOCKSAL_VHOST_PROXY_PORT_HTTP=$DOCKSAL_VHOST_PROXY_PORT_HTTP
    fi
    if [[ "$remote_docksal_vhost_proxy_port_https" != "$DOCKSAL_VHOST_PROXY_PORT_HTTPS" ]]; then
        fin config set --global DOCKSAL_VHOST_PROXY_PORT_HTTPS=$DOCKSAL_VHOST_PROXY_PORT_HTTPS
    fi
}
#-------------------------- END: Functions --------------------------------



#-------------------------- Execution --------------------------------
case $1 in
    up)
        fin remote project up
    ;;
    start)
        fin remote project start
    ;;
    restart)
        fin remote project restart
    ;;
    stop)
        fin remote project stop
    ;;
    down)
        fin remote project down
    ;;
    open)
        fin remote project open
    ;;
    project|p)
        docksal_vhost_proxy_ports_check
        shift
        case $1 in
            restart)
                docksal_project_stop && sleep 1 && docksal_project_start
            ;;
            up)
                docksal_project_up
            ;;
            start)
                docksal_project_start
            ;;
            stop)
                docksal_project_stop
            ;;
            down)
                docksal_project_down
            ;;
            open)
                docksal_project_open
            ;;
        esac
    ;;
    proxy|x)
        shift
        docker_compose_proxy "$@"
    ;;
    config|c)
        print_text_line ${color_title} "Configuration"
        print_text_line ${color_green} "  DOCKSAL_ENVIRONMENT: ${color_green_bold}${DOCKSAL_ENVIRONMENT}"
        print_text_line ${color_green} "  DOCKSAL_HOST: ${color_green_bold}${DOCKSAL_HOST}"
        print_text_line ${color_green} "  DOCKER_HOST: ${color_green_bold}${DOCKER_HOST}"
        print_text_line ${color_green} "  REMOTE_HOST_IP: ${color_green_bold}${REMOTE_HOST_IP}"
        print_text_line ${color_green} "  PROJECT_ROOT: ${color_green_bold}${PROJECT_ROOT}"
        print_text_line ${color_green} "  REMOTE_VIRTUAL_HOST: ${color_green_bold}${REMOTE_URL_HTTP}"
        docker exec -t ${PROXY_APP_NAME}_nginx_1 cat /etc/nginx/conf.d/default.conf
    ;;
#    cleanall)
#        print_text_line ${color_title} "Stop Docker containers"
#        docker stop $(docker ps -q -a)
#        print_text_line ${color_title} "Remove Docker containers"
#        docker rm $(docker ps -q -a)
#        print_text_line ${color_title} "Remove Docker networks"
#        docker network prune -f
#        print_text_line ${color_title} "Remove Docker volumes"
#        docker volume rm $(docker volume ls -q)
#        _docksal_env_reset
#    ;;
    *)
        fin help remote
    ;;
esac
#-------------------------- END: Execution --------------------------------
